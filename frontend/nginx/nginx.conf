server {
    # listen 443 ssl;
    listen 80;
    server_name localhost;

    # ssl_certificate /etc/ssl/certs/nginx.crt;
    # ssl_certificate_key /etc/ssl/certs/nginx.key;

    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_prefer_server_ciphers on;
    # ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';

    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    location /api {  
        proxy_pass http://tetor_backend:8000; #proxy requests for API calls
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Handle CORS if needed
        add_header Access-Control-Allow-Origin "*";  # Adjust for security in production
        add_header Access-Control-Allow-Methods "GET, PUT, POST, OPTIONS";  # Allowed methods
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";  # Allowed headers

        # Handle OPTIONS requests for CORS preflight
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*";  # Adjust for security in production
            add_header Access-Control-Allow-Methods "GET, PUT, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            return 204;  # Respond with no content
        }
    }
}